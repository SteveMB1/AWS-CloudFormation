{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.1.0.0/20",
        "EnableDnsSupport": "true",
        "EnableDnsHostnames": "true",
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Application"
          }
        ]
      }
    },
    "Private1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.1.0.0/22",
        "AvailabilityZone": "us-east-1a",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Private1"
          }
        ]
      }
    },
    "Private2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.1.4.0/22",
        "AvailabilityZone": "us-east-1b",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Private2"
          }
        ]
      }
    },
    "Private3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.1.8.0/22",
        "AvailabilityZone": "us-east-1c",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Private3"
          }
        ]
      }
    },
    "Private4": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.1.12.0/23",
        "AvailabilityZone": "us-east-1d",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Private4"
          }
        ]
      }
    },
    "Public1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.1.14.0/28",
        "AvailabilityZone": "us-east-1a",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Public1"
          }
        ]
      }
    },
    "Public2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.1.14.16/28",
        "AvailabilityZone": "us-east-1b",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Public2"
          }
        ]
      }
    },
    "Public3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": "10.1.14.32/28",
        "AvailabilityZone": "us-east-1c",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Public3"
          }
        ]
      }
    },
    "PublicR1": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NATGW1"
        },
        "RouteTableId": {
          "Ref": "PrivateRT1"
        }
      }
    },
    "NATGW1": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "EIP1",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "Public1"
        }
      }
    },
    "EIP1": {
      "Type": "AWS::EC2::EIP",
      "Properties": {}
    },
    "PublicR2": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NATGW2"
        },
        "RouteTableId": {
          "Ref": "PrivateRT2"
        }
      }
    },
    "NATGW2": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "EIP2",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "Public2"
        }
      }
    },
    "EIP2": {
      "Type": "AWS::EC2::EIP",
      "Properties": {}
    },
    "EIP3": {
      "Type": "AWS::EC2::EIP",
      "Properties": {}
    },
    "NATGW3": {
      "Type": "AWS::EC2::NatGateway",
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "EIP3",
            "AllocationId"
          ]
        },
        "SubnetId": {
          "Ref": "Public3"
        }
      }
    },
    "PublicR3": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "NATGW3"
        },
        "RouteTableId": {
          "Ref": "PrivateRT3"
        }
      }
    },
    "PrivateRT2": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateRT2"
          }
        ]
      }
    },
    "PrivateRT3": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateRT3"
          }
        ]
      }
    },
    "PrivateRT1": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "PrivateRT1"
          }
        ]
      }
    },
    "EC2SRTAES72": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRT1"
        },
        "SubnetId": {
          "Ref": "Private1"
        }
      }
    },
    "EC2SRTA1CZQX": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRT2"
        },
        "SubnetId": {
          "Ref": "Private2"
        }
      }
    },
    "EC2SRTA4NJQU": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRT3"
        },
        "SubnetId": {
          "Ref": "Private3"
        }
      }
    },
    "InternetRT": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "InternetRT"
          }
        ]
      }
    },
    "InternetR": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "Internet"
        },
        "RouteTableId": {
          "Ref": "InternetRT"
        }
      }
    },
    "Internet": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {}
    },
    "EC2SRTA3XFJE": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "InternetRT"
        },
        "SubnetId": {
          "Ref": "Public1"
        }
      }
    },
    "EC2SRTA4W3LC": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "InternetRT"
        },
        "SubnetId": {
          "Ref": "Public2"
        }
      }
    },
    "EC2SRTAEZRA": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "InternetRT"
        },
        "SubnetId": {
          "Ref": "Public3"
        }
      }
    },
    "EC2VPCG4CPRU": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "InternetGatewayId": {
          "Ref": "Internet"
        },
        "VpcId": {
          "Ref": "VPC"
        }
      }
    },
    "EC2SRTARMUL": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "PrivateRT2"
        },
        "SubnetId": {
          "Ref": "Private4"
        }
      }
    },
    "Application": {
      "Type": "AWS::ElasticBeanstalk::Application",
      "Properties": {
        "ApplicationName": "Application",
        "Description": "AWS Elastic Beanstalk NodeJS Application"
      }
    },
    "Environment": {
      "Type": "AWS::ElasticBeanstalk::Environment",
      "Properties": {
        "ApplicationName": {
          "Ref": "Application"
        },
        "Description": "AWS Elastic Beanstalk Environment running NodeJS Application",
        "EnvironmentName": "Environment",
        "TemplateName": {
          "Ref": "NodeJS"
        },
        "VersionLabel": {
          "Ref": "Version"
        }
      }
    },
    "Version": {
      "Type": "AWS::ElasticBeanstalk::ApplicationVersion",
      "Properties": {
        "ApplicationName": {
          "Ref": "Application"
        },
        "Description": "AWS ElasticBeanstalk Sample Application Version",
        "SourceBundle": {
          "S3Bucket": {
            "Fn::Join": [
              "-",
              [
                "elasticbeanstalk-samples",
                {
                  "Ref": "AWS::Region"
                }
              ]
            ]
          },
          "S3Key": "php-sample.zip"
        }
      }
    },
    "NodeJS": {
      "Type": "AWS::ElasticBeanstalk::ConfigurationTemplate",
      "Properties": {
        "ApplicationName": {
          "Ref": "Application"
        },
        "Description": "my sample configuration template",
        "SolutionStackName": "64bit Amazon Linux 2016.09 v3.3.1 running Node.js",
        "OptionSettings": [
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "InstanceType",
            "Value": "t2.medium"
          },
          {
            "Namespace": "aws:ec2:vpc",
            "OptionName": "VPCId",
            "Value": {
              "Ref": "VPC"
            }
          },
          {
            "Namespace": "aws:ec2:vpc",
            "OptionName": "Subnets",
            "Value": {
              "Fn::Join": [
                ",",
                [
                  {
                    "Ref": "Private1"
                  },
                  {
                    "Ref": "Private2"
                  },
                  {
                    "Ref": "Private3"
                  },
                  {
                    "Ref": "Private4"
                  }
                ]
              ]
            }
          },
          {
            "Namespace": "aws:ec2:vpc",
            "OptionName": "ELBSubnets",
            "Value": {
              "Fn::Join": [
                ",",
                [
                  {
                    "Ref": "Public1"
                  },
                  {
                    "Ref": "Public2"
                  },
                  {
                    "Ref": "Public3"
                  }
                ]
              ]
            }
          },
          {
            "Namespace": "aws:autoscaling:asg",
            "OptionName": "MinSize",
            "Value": "2"
          },
          {
            "Namespace": "aws:autoscaling:asg",
            "OptionName": "MaxSize",
            "Value": "20"
          },
          {
            "Namespace": "aws:elasticbeanstalk:environment",
            "OptionName": "EnvironmentType",
            "Value": "LoadBalanced"
          },
          {
            "Namespace": "aws:elb:policies",
            "OptionName": "ConnectionDrainingEnabled",
            "Value": "true"
          },
          {
            "Namespace": "aws:autoscaling:updatepolicy:rollingupdate",
            "OptionName": "RollingUpdateEnabled",
            "Value": "true"
          },
          {
            "Namespace": "aws:elasticbeanstalk:command",
            "OptionName": "BatchSize",
            "Value": "25"
          },
          {
            "Namespace": "aws:autoscaling:launchconfiguration",
            "OptionName": "SecurityGroups",
            "Value": {
              "Ref": "HTTPIngress"
            }
          }
        ]
      }
    },
    "HTTPIngress": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow http(s) to client host",
        "VpcId": {
          "Ref": "VPC"
        },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": "443",
            "ToPort": "443",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    }
  }
}
